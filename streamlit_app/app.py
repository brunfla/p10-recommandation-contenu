import streamlit as st
import requests
import pandas as pd
import os

# --- LOGGING (stdout pour Docker logs) ---
import logging
import sys
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

# Lire la variable d‚Äôenvironnement "LOCAL"
LOCAL = os.environ.get("LOCAL", "false").lower() == "true"

# D√©finir l'URL de base selon l'environnement
if LOCAL:
    BASE_URL = "http://azure_function:7071/api"
    logger.info("üåç Mode LOCAL activ√©")
else:
    BASE_URL = "https://p10.azurewebsites.net/api"
    logger.info("‚òÅÔ∏è Mode PRODUCTION activ√©")

# Endpoints des API
COLLAB_ENDPOINT = f"{BASE_URL}/recommend-articles-collaborative"
CONTENT_ENDPOINT = f"{BASE_URL}/recommend-articles-content"

# --- Interface Streamlit ---
st.set_page_config(page_title="Syst√®me de Recommandation", layout="centered")

st.title("üéØ Syst√®me de Recommandation d‚ÄôArticles")
st.markdown("Testez les deux moteurs : *Collaboratif* et *Content-Based Filtering*")

# --- S√©lection de l'utilisateur ---
user_ids = [501, 502, 503, 504, 505]
selected_user = st.selectbox("S√©lectionnez un utilisateur", user_ids)
logger.info(f"üë§ Utilisateur s√©lectionn√© : {selected_user}")

# --- Choix du moteur de recommandation ---
mode = st.radio("Choisissez le moteur de recommandation :", ["Collaboratif", "Content-Based"])
logger.info(f"‚öôÔ∏è Moteur s√©lectionn√© : {mode}")

# --- Charger les clics depuis un fichier CSV ---
@st.cache_data
def load_clicks(csv_path="clicks.csv"):
    df = pd.read_csv(csv_path)
    logger.info(f"üìÇ Clics charg√©s depuis {csv_path} ({len(df)} lignes)")
    return df

clicks_df = load_clicks()

# Pr√©parer le dernier clic uniquement pour le content-based
user_clicks_df = clicks_df[clicks_df["user_id"] == selected_user]
user_clicks_df = user_clicks_df.sort_values(by="click_timestamp", ascending=False)

# Par d√©faut, pas de clic √† envoyer
real_clicks = []

if not user_clicks_df.empty:
    last_click = user_clicks_df.iloc[0]
    real_clicks = [{
        "user_id": selected_user,
        "click_article_id": int(last_click["click_article_id"]),
        "click_timestamp": int(last_click["click_timestamp"])
    }]
    logger.info(f"üñ±Ô∏è Dernier clic utilis√© : {real_clicks[0]}")
else:
    logger.warning("‚ö†Ô∏è Aucun clic trouv√© pour cet utilisateur.")

# --- Lancer la recommandation ---
if st.button("üì° Lancer la recommandation"):
    with st.spinner("Analyse en cours..."):
        try:
            if mode == "Collaboratif":
                payload = {"user_id": selected_user}
                url = COLLAB_ENDPOINT
            else:
                if not real_clicks:
                    st.warning("Aucun clic trouv√© pour cet utilisateur.")
                    logger.warning("üö´ Recommandation annul√©e : pas de clic")
                    st.stop()

                payload = {
                    "user_id": selected_user,
                    "clicks": real_clicks  # Seulement le dernier clic
                }
                url = CONTENT_ENDPOINT

            logger.info(f"üì§ Requ√™te envoy√©e √† {url}")
            logger.info(f"Payload : {payload}")

            response = requests.post(url, json=payload)
            logger.info(f"üì• R√©ponse re√ßue : {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                articles = result.get("recommended_articles", [])
                logger.info(f"‚úÖ Articles recommand√©s : {articles}")
                if articles:
                    st.success("‚úÖ Recommandations g√©n√©r√©es !")
                    st.markdown("**Articles recommand√©s :**")
                    st.write(articles)
                else:
                    st.warning("Aucune recommandation trouv√©e pour cet utilisateur.")
                    logger.warning("‚ö†Ô∏è Liste d‚Äôarticles vide")
            else:
                st.error(f"‚ùå Erreur {response.status_code} : {response.text}")
                logger.error(f"‚ùå Erreur API : {response.status_code} - {response.text}")

        except Exception as e:
            st.exception(f"Erreur lors de la requ√™te : {str(e)}")
            logger.exception("‚ùå Exception pendant l'appel API")
